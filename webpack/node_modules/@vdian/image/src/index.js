!(function (factory) { 
    if (typeof module !== "undefined" && module.exports) {
        module.exports = factory();
    } else {
        window.image= factory();
    }
}(function () {
    var DEFAULT_HOSTNAME = 'si.geilicdn.com',
        FLEX_SIZE = 800,
        CDNSIZELIST = [
            800, 500, 256, 160, 60
        ],
        hostnameList = ['si.geilicdn.com', 'sa.geilicdn.com', 'wd.geilicdn.com', 'img.geilicdn.com'];
    var IMAGE_STORAGE = 'IMAGE_STORAGE';
    var _localStorage = window.localStorage;
    var PATTERN = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/,
        FIELDS = [
            'origin',
            'protocol',
            "slash",
            'hostname',
            'port',
            'path',
            'query',
            'hash'
        ];
    var params = {}
    class FormatImage {
        constructor(url) {
            var result = PATTERN.exec(url);
            result && FIELDS.forEach((key, i) => {
                this[key] = result[i];
            })
        }
        extend(target, source) {
            for (var k in source) {
                if (source.hasOwnProperty(k)) {
                    target[k] = source[k];
                }
            }
            return target;
        }

        toString() {
            var string = (this.protocol? this.protocol : 'https') + ":" + this.slash + this.hostname;

            if (this.port && this.port !== '80') {
                string += ':' + this.port;
            }
            if (this.path) {
                string += "/" + this.path;
            }

            if (this.query) {
                string += this.query;
            }
            if (this.hash) {
                string += "#" + this.hash;
            }
            return string;
        }
        getDomain() {
            var string = (this.protocol ? this.protocol: 'https') + ":" + this.slash + this.hostname;

            if (this.port && this.port !== '80') {
                string += ':' + this.port;
            }
            return string;
        }
        get params() {
            return params
        }
        set params(v) {
            if (typeof v === 'object') {
                for (var key in params) {
                    delete params[key]
                }
                for (var key in v) {
                    params[key] = v[key]
                }
            }
        }
        get query() {
            var search = [];
            for (var k in params) {
                if (params[k] === undefined) {
                    continue
                }
                params[k]? search.push(encodeURIComponent(k) + '=' + encodeURIComponent(params[k])): search.push(encodeURIComponent(k));
            }
            return search.length? '?' + search.join('&') : ''
        }

        set query(v) {
            if (typeof v === 'string') {
                if (v.indexOf('?') === 0) {
                    v = v.substr(1);
                }
                var search = v.split('&')
                for (var k in params) {
                    delete params[k];
                }
                for (var i = 0; i < search.length; i++) {
                    var pair = search[i].split('=');
                    // pair[1] 可能为 0/false/null 等非空但直接运算会返回 false 的值
                    if (pair[1] !== undefined) {
                        pair[1] = pair[1].toString();
                    }
                    if (pair[0]) {
                        try {
                            params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
                        } catch (e) {
                            params[pair[0]] = pair[1];
                        }
                    }
                }
            }
        }

    }
    var image = {
        // 默认配置
        getDefaultOptions:function(){
            return {
                webp:true,
                cache:false,
                flex:false
            } 
        },
        // 检测浏览器是否支持web格式 http://caniuse.com/#search=webp
        detectWebp: function () {
            let canvas = document && document.createElement('canvas');
            if (!!(canvas.getContext && canvas.getContext('2d'))) {
                return canvas.toDataURL('image/webp').indexOf('data:image/webp') == 0;
            } else {
                return false;
            }
        },
        //获取最佳尺寸
        getBestSize: function (size) {
            let MAX_SIZE = Math.max(...CDNSIZELIST),
                MIN_SIZE = Math.min(...CDNSIZELIST),
                bestSize = 0;
            size = Number(size);
            if (!size) {
                console.error('未设置图片尺寸');
                return
            }
            if (size >= MAX_SIZE) {
                return MAX_SIZE
            }
            if (size <= MIN_SIZE) {
                return MIN_SIZE
            }

            for (let i = 1; i < CDNSIZELIST.length; i++) {
                let cur_size = CDNSIZELIST[i],
                    pre_size = CDNSIZELIST[i - 1];
                if (size >= cur_size) {
                    size == cur_size
                        ? (bestSize = cur_size)
                        : (bestSize = pre_size)
                    break
                }
            }
            return bestSize
        },
        //校验入参
        validate: function (options) {
            //未设置图片地址
            if (!options.url) {
                return {code: 1, message: '未设置图片地址'}
            }

            if (options.best) {
                if (!options.size) {
                    return {code: 2, message: '未设置图片剪裁尺寸'}
                }
            } else {
                if (!(options.w && options.h)) {
                    return {code: 2, message: '未设置图片剪裁尺寸'}
                }
            }

            return {code: 0}
        },
        //获取最佳尺寸
        getImageWithBestSize: function (url, options) {
            var opts = this.getDefaultOptions();

            var params = options;
            params.url = url;
            options.best = true;
            options.webp ==undefined && (options.webp = opts.webp);
            options.cache ==undefined && (options.cache = opts.cache);
            options.flex == undefined && (options.flex = opts.flex);
            var vcode = this.validate(params)
            if (vcode.code) {
                console.warn(vcode.message)
                return
            }
            var imgUrl = this.getImageUrl(url, options)
            return imgUrl
        },
        // 获取自定义尺寸
        getImageWithCustomSize: function (url, options) {
            var params = options;
            var opts = this.getDefaultOptions();
            params.url = url;
            options.best = false;
            options.webp ==undefined && (options.webp = opts.webp);
            options.cache ==undefined && (options.cache = opts.cache);
            options.flex == undefined && (options.flex = opts.flex);
            var vcode = this.validate(params)
            if (vcode.code) {
                console.warn(vcode.message)
                return
            }
            var imgUrl = this.getImageUrl(url, options)
            return imgUrl
        },
        getImageUrl: function (url, options) {
            var formatImage = new FormatImage(url);
            if (hostnameList.indexOf(formatImage.hostname) == -1) {
                return url
            }
            formatImage.hostname = this.handleHost(formatImage.hostname)
            formatImage.path = this.handleImageType(formatImage.path, options)
            formatImage.params = this.handleParams(options)
            // 非规范图片不进行缓存
            if (!options.best) {
                return formatImage.toString()
            }
            // 是否要缓存图片链接到localstorage
            if(options.cache){
                return this.getImageStorage(formatImage)
            }else{
                return formatImage.toString()
            }   
        },
        /**
         * 域名收敛
         * @param {*} hostname
         */
        handleHost: function (hostname) {
            let host = hostname;
            switch (hostname) {
                case 'wd.geilicdn.com':
                case 'si.geilicdn.com':
                    host = DEFAULT_HOSTNAME;
            }
            return host
        },
        handleImageType: function (path, options) {
            let isSupportWebp = this.detectWebp();
            var string = path.replace(/(\.(?:gif|jpg|jpeg|png|webp)(?:\.(?:jpg|png|webp))?)$/i, (match) => {
                let val = '',
                    type = '';
                // if (match) {
                //     type = match.toLowerCase(); // 一些老的图片链接是 JPG 不支持转成jpg格式
                // }
                type = match
                switch (type) {
                    case '.png.webp':
                    case '.jpg.webp':
                    case '.gif.webp':
                    case '.jpeg.webp':
                        val = isSupportWebp ? (options.webp ? type: type.replace('.webp', '')):type.replace('.webp', '');
                        break;
                    case '.webp':
                        val = isSupportWebp ? (options.webp ? type: '.webp.jpg'): '.webp.jpg';
                        break;
                    case '.png':
                    case '.jpg':
                    case '.JPG':
                    case '.jpeg':
                        val = isSupportWebp ?  (options.webp ? type+'.webp' :type ) : type;
                        break
                    case '.gif':
                        val = type;
                        break;
                    default :
                     val = type;
                }

                return val
            })
            return string;
        },
        handleParams: function (options) {
            if (options.best) {
                return this.getBestUrl(options)
            } else {
                return this.getCustomUrl(options)
            }
        },
        getBestUrl: function (options) {
            let flex = options && options.flex,
                size = Number(options && options.size)
            let bestSize = this.getBestSize(size);
            return flex
                ? {
                    w: FLEX_SIZE,
                    h: FLEX_SIZE
                }
                : {
                    w: bestSize,
                    h: bestSize,
                    cp: 1
                };
        },
        getCustomUrl: function (options) {
            let w = Number(options && options.w),
                h = Number(options && options.h),
                flex = options && options.flex;

            return flex
                ? {
                    w: w,
                    h: h
                }
                : {
                    w: w,
                    h: h,
                    cp: 1
                };
        },
        parseImageStorage: function () {
            var imageStorageString = _localStorage.getItem(IMAGE_STORAGE),
                imageStorage = imageStorageString
                    ? JSON.parse(imageStorageString)
                    : {}
            return imageStorage
        },
        getImageStorage: function (image) {
            var path = image.path,
                params = image.params,
                imageStorage = this.parseImageStorage();
            // 有缓存
            if (imageStorage[path]) {
                var needCache = this.compareParams(params, imageStorage[path]);
                if (needCache) {
                    this.setImageStorage(image, imageStorage)
                    return image.toString()
                }

                return this.getCacheUrl(image, imageStorage)
            }

            this.setImageStorage(image, imageStorage)
            return image.toString()
        },
        getCacheUrl: function (image, imageStorage) {
            // var image = image.extend({}, image)
            image.params = imageStorage[image.path]
            return image.toString()
        },
        setImageStorage: function (image, imageStorage) {
            imageStorage[image.path] = image.params;
            _localStorage.setItem(IMAGE_STORAGE, JSON.stringify(imageStorage));
        },
        compareParams: function (current, old) {
            // 裁剪
            if (current.cp == old.cp) {
                if (current.w > old.w) {
                    return true
                }

                return false
            }
            return true
        }
    }
    return image
}))
